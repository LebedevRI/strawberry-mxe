From ed1d46e0718a1027e014882e97d784e252fced82 Mon Sep 17 00:00:00 2001
From: Jonas Kvinge <jonas@jkvinge.net>
Date: Fri, 16 Jul 2021 01:47:56 +0200
Subject: [PATCH] Update CMakeLists.txt files for Qt 6

---
 CMakeLists.txt       | 181 ++++++++++++++++++++++++++++++-------------
 src/CMakeLists.txt   |  17 ++--
 tests/CMakeLists.txt |  21 ++---
 3 files changed, 147 insertions(+), 72 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index fa4b0cb..507cda0 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,36 +1,79 @@
-cmake_minimum_required( VERSION 2.8.9 FATAL_ERROR )
+cmake_minimum_required( VERSION 2.8.12 FATAL_ERROR )
 
 project( libmygpo-qt )
 
 set( CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules)
-set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DQT_NO_CAST_FROM_ASCII -DQT_NO_CAST_TO_ASCII" )
 
-option(BUILD_WITH_QT4 "Build libmygpo-qt with Qt4" OFF)
+include(CheckCXXCompilerFlag)
 
-if( NOT BUILD_WITH_QT4 )
-    if( MYGPO_BUILD_TESTS )
-        find_package(Qt5 REQUIRED COMPONENTS Core Network Test CONFIG)
-    else()
-        find_package(Qt5 REQUIRED COMPONENTS Core Network CONFIG)
-    endif()
-    set(MYGPO_QT_VERSION_SUFFIX 5)
+list(APPEND COMPILE_OPTIONS
+  -Wall
+  -Wextra
+  -Wpedantic
+  -Wunused
+  -Wshadow
+  -Wundef
+  -Wpacked
+  -Wuninitialized
+  -Wredundant-decls
+  -Wunused-parameter
+  -Wcast-align
+  -Wchar-subscripts
+  -Wpointer-arith
+  -Wwrite-strings
+  -Wformat-security
+  -Wold-style-cast
+  -Woverloaded-virtual
+  -Wnon-virtual-dtor
+  -Wstack-protector
+  -Winit-self
+  -Wmissing-format-attribute
+  -Wmissing-include-dirs
+  -Wmissing-declarations
+  -Wstrict-overflow=2
+  -Wformat=2
+  -Wdisabled-optimization
+  -fno-inline
+)
+if ( NOT WIN32 )
+  list(APPEND COMPILE_OPTIONS -fvisibility=hidden )
+endif()
 
-    macro(qt_wrap_cpp)
-        qt5_wrap_cpp(${ARGN})
-    endmacro()
+if (CMAKE_COMPILER_IS_GNUCXX)
+  list(APPEND COMPILE_OPTIONS
+    -ggdb3
+    -Wunsafe-loop-optimizations
+  )
+  check_cxx_compiler_flag( -Wlogical-op GNUCXX_HAS_WLOGICAL_OP )
+  if ( GNUCXX_HAS_WLOGICAL_OP )
+    list(APPEND COMPILE_OPTIONS -Wlogical-op )
+  endif()
+endif (CMAKE_COMPILER_IS_GNUCXX)
 
-    # pkg-config names of QtCore and QtNetwork are Qt5Core and Qt5Network for
-    # Qt5
-    set(MYGPO_QT_MAJOR_VERSION "5")
-    set(MYGPO_QT4_QJSON_DEP "")
-else()
-    message(STATUS "Could not find Qt5, searching for Qt4 instead...")
-    message(STATUS "Qt4 Support is deprecated, building with Qt4 is no longer officially supported")
-    if( MYGPO_BUILD_TESTS )
-        find_package( Qt4 COMPONENTS QtCore QtNetwork QtTest REQUIRED )
-    else( MYGPO_BUILD_TESTS )
-        find_package( Qt4 COMPONENTS QtCore QtNetwork REQUIRED )
+add_compile_options(${COMPILE_OPTIONS})
+
+add_definitions(-DQT_STRICT_ITERATOR -DQT_NO_CAST_FROM_ASCII -DQT_NO_CAST_TO_ASCII)
+
+option( MYGPO_QT_MAJOR_VERSION "Qt version to use (4, 5 or 6)" )
+option( BUILD_WITH_QT4 "Build libmygpo-qt with Qt 4" OFF )
+option( BUILD_WITH_QT5 "Build libmygpo-qt with Qt 5" OFF )
+option( BUILD_WITH_QT6 "Build libmygpo-qt with Qt 6" OFF )
+option( MYGPO_BUILD_TESTS "Build all unit tests" ON )
+
+if( BUILD_WITH_QT4 OR MYGPO_QT_MAJOR_VERSION EQUAL 4 )
+
+    message(STATUS "Qt 4 Support is deprecated, building with Qt 4 is no longer officially supported")
+
+    set( BUILD_WITH_QT4 ON CACHE BOOL "" FORCE )
+    set( MYGPO_QT_MAJOR_VERSION "" CACHE STRING "" FORCE )
+
+    set(QT_COMPONENTS QtCore QtNetwork)
+    if(MYGPO_BUILD_TESTS)
+      list(APPEND QT_COMPONENTS QtTest)
     endif()
+
+    find_package( Qt4 COMPONENTS ${QT_COMPONENTS} REQUIRED )
+
     set( QT_DONT_USE_QTGUI TRUE )
     include( ${QT_USE_FILE} )
 
@@ -38,11 +81,59 @@ else()
         qt4_wrap_cpp(${ARGN})
     endmacro()
 
-    set(MYGPO_QT_MAJOR_VERSION "")
     set(MYGPO_QT4_QJSON_DEP "Requires.private: QJson")
 
-    # QJson is only required for Qt4
+    # QJson is only required for Qt 4
     find_package(QJSON REQUIRED)
+
+    set( MYGPO_QT_VERSION_SUFFIX ${MYGPO_QT_MAJOR_VERSION} )
+
+else()
+
+    set(QT_COMPONENTS Core Network)
+    if(MYGPO_BUILD_TESTS)
+      list(APPEND QT_COMPONENTS Test)
+    endif()
+
+    if( BUILD_WITH_QT6 OR MYGPO_QT_MAJOR_VERSION EQUAL 6 )
+      set( MYGPO_QT_MAJOR_VERSION 6 CACHE STRING "" FORCE )
+      set( BUILD_WITH_QT6 ON CACHE BOOL "" FORCE )
+    elseif( BUILD_WITH_QT5 OR MYGPO_QT_MAJOR_VERSION EQUAL 5 )
+      set( MYGPO_QT_MAJOR_VERSION 5 CACHE STRING "" FORCE )
+      set( BUILD_WITH_QT5 ON CACHE BOOL "" FORCE )
+      set( QT_MIN_VERSION 5.2 )
+    else()
+      # Automatically detect Qt version.
+      find_package( QT NAMES Qt6 Qt5 COMPONENTS ${QT_COMPONENTS} REQUIRED )
+      if( QT_FOUND AND QT_VERSION_MAJOR EQUAL 6 )
+        set( BUILD_WITH_QT6 ON CACHE BOOL "" FORCE )
+        set( MYGPO_QT_MAJOR_VERSION 6 CACHE STRING "" FORCE )
+      elseif (QT_FOUND AND QT_VERSION_MAJOR EQUAL 5 )
+        set( BUILD_WITH_QT5 ON CACHE BOOL "" FORCE )
+        set( MYGPO_QT_MAJOR_VERSION 5 CACHE STRING "" FORCE )
+        set( QT_MIN_VERSION 5.2 )
+      else()
+        message( FATAL_ERROR "Qt 5 and 6 was not found. Configure with -DBUILD_WITH_QT4=ON to build with Qt 4." )
+      endif()
+    endif()
+
+    if( BUILD_WITH_QT5 )
+      macro(qt_wrap_cpp)
+        qt5_wrap_cpp(${ARGN})
+      endmacro()
+    endif()
+
+    if( BUILD_WITH_QT6 )
+      macro(qt_wrap_cpp)
+        qt6_wrap_cpp(${ARGN})
+      endmacro()
+    endif()
+
+    find_package( Qt${MYGPO_QT_MAJOR_VERSION} ${QT_MIN_VERSION} REQUIRED COMPONENTS ${QT_COMPONENTS} )
+
+    set( MYGPO_QT_VERSION_SUFFIX ${MYGPO_QT_MAJOR_VERSION} )
+    set( QT_DEFAULT_MAJOR_VERSION ${MYGPO_QT_MAJOR_VERSION} )
+
 endif()
 
 # Don't use absolute path in Mygpo-qtTargets-$buildType.cmake
@@ -59,26 +150,6 @@ set( MYGPO_QT_SONAME "${MYGPO_QT_VERSION_MAJOR}")
 #Configure Version.h.in with the actual version number
 configure_file( src/Version.h.in ${CMAKE_CURRENT_BINARY_DIR}/src/Version.h )
 
-include(CheckCXXCompilerFlag)
-
-if (CMAKE_COMPILER_IS_GNUCXX)
-    ADD_DEFINITIONS( -Wcast-align -Wchar-subscripts -Wpointer-arith
-       -Wwrite-strings -Wpacked -Wformat-security -Wmissing-format-attribute
-       -Wold-style-cast -Woverloaded-virtual -Wnon-virtual-dtor  -Wall -Wextra
-       -Wformat=2 -Wundef -Wstack-protector -Wmissing-include-dirs
-       -Winit-self -Wunsafe-loop-optimizations  -ggdb3 -fno-inline -DQT_STRICT_ITERATORS )
-    if ( NOT WIN32 )
-        add_definitions( -fvisibility=hidden )
-    endif()
-
-    check_cxx_compiler_flag( -Wlogical-op GNUCXX_HAS_WLOGICAL_OP )
-    if ( GNUCXX_HAS_WLOGICAL_OP )
-        add_definitions( -Wlogical-op )
-    endif()
-endif(CMAKE_COMPILER_IS_GNUCXX)
-
-option(MYGPO_BUILD_TESTS "Build all unit tests" ON)
-
 if(MYGPO_BUILD_TESTS)
     INCLUDE(CTest)
     enable_testing()
@@ -117,24 +188,24 @@ if(DOXYGEN_FOUND)
 endif(DOXYGEN_FOUND)
 
 # make uninstall support
-CONFIGURE_FILE(
+configure_file(
   "${CMAKE_CURRENT_SOURCE_DIR}/cmake_uninstall.cmake.in"
   "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
   IMMEDIATE @ONLY)
 
-ADD_CUSTOM_TARGET(uninstall
+add_custom_target(uninstall
   "${CMAKE_COMMAND}" -P "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake")
 
 # pkg-config
-IF (NOT WIN32)
-    FIND_PACKAGE(PkgConfig)
-    IF (PKG_CONFIG_FOUND)
-        CONFIGURE_FILE (${CMAKE_CURRENT_SOURCE_DIR}/libmygpo-qt.pc.in
+if (NOT WIN32)
+    find_package(PkgConfig)
+    if (PKG_CONFIG_FOUND)
+        configure_file (${CMAKE_CURRENT_SOURCE_DIR}/libmygpo-qt.pc.in
                             ${CMAKE_CURRENT_BINARY_DIR}/libmygpo-qt${MYGPO_QT_VERSION_SUFFIX}.pc
                             @ONLY)
-         INSTALL (FILES ${CMAKE_CURRENT_BINARY_DIR}/libmygpo-qt${MYGPO_QT_VERSION_SUFFIX}.pc DESTINATION lib${LIB_SUFFIX}/pkgconfig)
-    ENDIF (PKG_CONFIG_FOUND)
-ENDIF (NOT WIN32)
+         install (FILES ${CMAKE_CURRENT_BINARY_DIR}/libmygpo-qt${MYGPO_QT_VERSION_SUFFIX}.pc DESTINATION lib${LIB_SUFFIX}/pkgconfig)
+    endif (PKG_CONFIG_FOUND)
+endif (NOT WIN32)
 
 set(MYGPO_QT_TARGET_NAME mygpo-qt${MYGPO_QT_VERSION_SUFFIX} CACHE INTERNAL "" FORCE )
 
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 253e81e..a5d2f0f 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -1,6 +1,3 @@
-
-include_directories( ${QJSON_INCLUDE_DIR} ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR} )
-
 set ( LIBMYGPO_QT_SRC
         Config.cpp
         DeviceSyncResult.cpp
@@ -75,16 +72,22 @@ set ( LIBMYGPO_QT_INSTALL_H
         AddRemoveResult.h
 )
 
-QT_WRAP_CPP(LIBMYGPO_QT_MOC_SRC ${LIBMYGPO_QT_MOC_H} )
+qt_wrap_cpp(LIBMYGPO_QT_MOC_SRC ${LIBMYGPO_QT_MOC_H} )
 
 add_library( ${MYGPO_QT_TARGET_NAME} SHARED ${LIBMYGPO_QT_SRC} ${LIBMYGPO_QT_MOC_SRC} )
 
 set_target_properties( ${MYGPO_QT_TARGET_NAME} PROPERTIES VERSION ${MYGPO_QT_VERSION} SOVERSION ${MYGPO_QT_SONAME} DEFINE_SYMBOL MYGPO_MAKEDLL)
 
-if( NOT BUILD_WITH_QT4 )
-    target_link_libraries( ${MYGPO_QT_TARGET_NAME} Qt5::Core Qt5::Network)
+if(QJSON_FOUND)
+  target_include_directories( ${MYGPO_QT_TARGET_NAME} SYSTEM PRIVATE ${QJSON_INCLUDE_DIR} )
+endif(QJSON_FOUND)
+
+target_include_directories( ${MYGPO_QT_TARGET_NAME} PRIVATE ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR} )
+
+if( BUILD_WITH_QT4 )
+    target_link_libraries( ${MYGPO_QT_TARGET_NAME} PRIVATE ${QT_QTCORE_LIBRARY} ${QT_QTNETWORK_LIBRARY} ${QJSON_LIBRARIES})
 else()
-    target_link_libraries( ${MYGPO_QT_TARGET_NAME} ${QT_QTCORE_LIBRARY} ${QT_QTNETWORK_LIBRARY} ${QJSON_LIBRARIES})
+    target_link_libraries( ${MYGPO_QT_TARGET_NAME} PRIVATE Qt${MYGPO_QT_VERSION_SUFFIX}::Core Qt${MYGPO_QT_VERSION_SUFFIX}::Network)
 endif()
 
 install( TARGETS ${MYGPO_QT_TARGET_NAME} EXPORT ${MYGPO_QT_TARGET_NAME}Export DESTINATION ${LIB_INSTALL_DIR} )
diff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt
index 4f77158..c10d9b2 100644
--- a/tests/CMakeLists.txt
+++ b/tests/CMakeLists.txt
@@ -7,35 +7,36 @@ remove_definitions(-DQT_NO_CAST_TO_ASCII)
 
 set ( TESTOBJECTS_SRCDIR ${CMAKE_CURRENT_SOURCE_DIR}/../src )
 
-include_directories( ${QJSON_INCLUDE_DIR} ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_BINARY_DIR}/../src ${TESTOBJECTS_SRCDIR} )
-
 # UrlBuilder library
 add_library( UrlBuilder ${TESTOBJECTS_SRCDIR}/UrlBuilder.cpp ${TESTOBJECTS_SRCDIR}/Config.cpp )
+target_include_directories( UrlBuilder PRIVATE ${QJSON_INCLUDE_DIR} ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_BINARY_DIR}/../src ${TESTOBJECTS_SRCDIR} )
 if( NOT BUILD_WITH_QT4 )
-    target_link_libraries( UrlBuilder Qt5::Core )
+    target_link_libraries( UrlBuilder PRIVATE Qt${MYGPO_QT_VERSION_SUFFIX}::Core )
 endif()
 # JSONCreator library
-QT_WRAP_CPP(LIBMYGPO_QT_MOC_SRC ${TESTOBJECTS_SRCDIR}/EpisodeAction.h ${TESTOBJECTS_SRCDIR}/EpisodeAction_p.h )
+qt_wrap_cpp(LIBMYGPO_QT_MOC_SRC ${TESTOBJECTS_SRCDIR}/EpisodeAction.h ${TESTOBJECTS_SRCDIR}/EpisodeAction_p.h )
 add_library( JsonCreator ${TESTOBJECTS_SRCDIR}/JsonCreator.cpp ${TESTOBJECTS_SRCDIR}/EpisodeAction.cpp ${TESTOBJECTS_SRCDIR}/qjsonwrapper/Json.cpp ${LIBMYGPO_QT_MOC_SRC})
+target_include_directories( JsonCreator PRIVATE ${QJSON_INCLUDE_DIR} ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_BINARY_DIR}/../src ${TESTOBJECTS_SRCDIR} )
 if( NOT BUILD_WITH_QT4 )
-    target_link_libraries( JsonCreator Qt5::Core Qt5::Network )
+    target_link_libraries( JsonCreator PRIVATE Qt${MYGPO_QT_VERSION_SUFFIX}::Core Qt${MYGPO_QT_VERSION_SUFFIX}::Network )
 endif()
 
 set( EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR} )
 
 macro(add_libmygpo_test _source)
     get_filename_component(_name ${_source} NAME_WE)
-    QT_WRAP_CPP(${_name}_MOC_SRC ${_name}.h)
+    qt_wrap_cpp(${_name}_MOC_SRC ${_name}.h)
     add_executable(${_name} ${_source} ${${_name}_MOC_SRC})
-    target_link_libraries(${_name} ${QT_QTCORE_LIBRARY} ${QT_QTTEST_LIBRARY} ${QT_QTNETWORK_LIBRARY})
+    target_include_directories( ${_name} PRIVATE ${QJSON_INCLUDE_DIR} ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_BINARY_DIR}/../src ${TESTOBJECTS_SRCDIR} )
+    target_link_libraries(${_name} PRIVATE ${QT_QTCORE_LIBRARY} ${QT_QTTEST_LIBRARY} ${QT_QTNETWORK_LIBRARY})
     add_test(${_name}-test ${EXECUTABLE_OUTPUT_PATH}/${_name})
     if( NOT BUILD_WITH_QT4 )
-        target_link_libraries(${_name} Qt5::Network Qt5::Test)
+        target_link_libraries(${_name} PRIVATE Qt${MYGPO_QT_VERSION_SUFFIX}::Network Qt${MYGPO_QT_VERSION_SUFFIX}::Test)
     endif()
 endmacro(add_libmygpo_test)
 
 add_libmygpo_test( UrlBuilderTest.cpp )
-target_link_libraries( UrlBuilderTest UrlBuilder)
+target_link_libraries( UrlBuilderTest PRIVATE UrlBuilder)
 
 add_libmygpo_test( JsonCreatorTest.cpp )
-target_link_libraries( JsonCreatorTest JsonCreator ${QJSON_LIBRARIES} )
+target_link_libraries( JsonCreatorTest PRIVATE JsonCreator ${QJSON_LIBRARIES} )
